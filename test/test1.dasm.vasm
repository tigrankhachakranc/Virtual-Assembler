.STACK = 1024

.DATA

CHAR  var
CHAR  str1[] = "Hello World!"
CHAR  ch1	= 'A'
BYTE  bVal1	= 1
BYTE  bVal0	= 0
BYTE  bVal2	= 255
BYTE  bVal3[2]	= 79, 15
BYTE  bVal4[10]	= 10, 20, 30, 40, 50, 60, 70, 80, 90, 240
WORD  wVal1	= 0
WORD  wVal2	= 10000
WORD  wVal3	= 256
WORD  wVal4[5]	= 100, 200, 300, 400, 0
DWORD dwVal1	= 0xFFFFFFFF
DWORD dwVal2	= 0x989680
DWORD dwVal3	= 0xA0B0C0D0
DWORD dwVal4[5]	= 0, 0, 0, 0, 0
DWORD dwVal5[4]	= 0, 0x64, 0, 0xAAAAAAAA
QWORD qwVal1	= 0xFFFFFFFFFFFFFFF6
QWORD qwVal2	= 0x2540BE400
QWORD qwVal3	= 0x1080A0B0C0D0E0F0
QWORD qwVal4[5]	= 0, 0, 0, 0, 0
QWORD qwVal5	= 0xFFFFFFFFFFFFFFFF
QWORD qwVal6	= 0x8000000000000000
QWORD qwVal7[4]	= 0, 0xFFFF, 0, 0xABCDEF123400


.CODE

Func F1;	# Unit: test1
Func F2;	# Unit: test1
Func Main;	# Unit: test1

Func F1:
	MOVI DW R40, 0x01020304
	MOVI W  R40, 4128
	MOVI B  R40, 1
	MOVI DW R16, 0x00002710
	MOVE DW R20, R0
	MOVE B  R20, R0
	MOVE W  R20, R0
	MOVE DW R20, R0
	MOVE QW R24, R0
	SWAP DW R20, R28
	SWAP B  R20, R28
	SWAP W  R20, R28
	SWAP DW R20, R28
	SWAP QW R16, R24
Label1:
	AND DW R32, R8
	AND B  R32, R8
	AND W  R32, R8
	AND DW R32, R8
	AND QW R32, R8
	JEQ Label2
	ADD DW R32, R8
	ADD B  R32, R8
	ADD W  R32, R8
	ADD DW R32, R8
	ADD QW R32, R8
Label2:
	PUSH DW R0, 0
	POP DW R28, 0
	PUSH B  R0, 0
	POP B  R28, 0
	PUSH W  R0, 0
	POP W  R28, 0
	PUSH DW R0, 0
	POP DW R28, 0
	PUSH QW R0, 0
	POP QW R24, 0
	GETF R16
	SETF R16
	RET
EndF

Func F2:
	PUSHSF 16
	ADD DW R16, R0
	INC A0, 16
	DEC A3, 10
	SUB DW R24, R4
	STAE W  R16
	NOT W  R16
	MOVI B  R63, 4
	SHL W  R36, 5
	SHR W  R36, R2
	ROL W  R36, 7
	ROR W  R36, R2
	SAL W  R36, 3
	SAR W  R36, R2
	RCL W  R36, 1
	RCR W  R36, R2
	ADC DW R48, R32
	SBB DW R48, R32
	MUL DW R48, R32
	IMUL DW R48, R32
	DIV DW R48, R32
	IDIV DW R48, R32
	NEG QW R48
	CAST DW W R24
	CAST W DW R16
	MOVI A0, bVal1
	MOVI A1, wVal1
	MOVI A2, dwVal1
	MOVI A3, qwVal1
	LOAD B  R40, A0
	LOAD W  R40, A1
	LOAD DW R40, A2
	LOAD QW R40, A3
	STORE B  R40, A0
	STORE W  R40, A1
	STORE DW R40, A2
	STORE QW R40, A3
	LDREL DW R24, SP, 0x0000000A
	STREL DW R24, SP, 0xFFFFFFF6
	MOVI DW R0, 0x00000002
	OUT DW R0, 4
	OUT W  R40, 8
Loop:
	IN DW R44, 4
	IN W  R44, 8
	MOVE DW R24, R0
	CMP DW R24, R44
	JNE Loop
	TEST DW R0, R0
	JEQ Exit
Exit:
	POPSF 8
EndF

Func Main:
	PUSHSF
	JUMP start
	NOP
	NOP
	NOP
start:
	MOVI A0,       0xA0
	MOVI A3, F1
	CALL A3
	MOVI A0, F2
	PUSH QW R0, 0
	CALL A0
	POPSF
	RET
EndF

.MAIN = Main
