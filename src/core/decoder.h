#ifndef VASM_CORE_DECODER_H
#define VASM_CORE_DECODER_H

//
// Includes
//
#include "command_library.h"


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace vasm {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace core {
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//
//	Command Basic Decoder
//
class CDecoder final
{
public:
	CDecoder(CCommandLibraryPtr pCmdLib);
	~CDecoder();

	// Non copiable nor movable
	CDecoder(CDecoder const&) = delete;
	CDecoder(CDecoder&&) = delete;
	void operator=(CDecoder const&) = delete;
	void operator=(CDecoder&&) = delete;

public:
	//
	//	Methods
	//

	// Decodes command specified by the pointer into SCommandInfo
	void Decode(uchar const* pCmd, SCommandInfo& tCmdInfo);

private:
	static void DecodeArg(uchar const*& pCmd, SCommandInfo& tCmdInfo, EOprIdx eOprIdx);
	static void ReadIMV( uchar const*& pCmd, SCommandInfo& tCmdInfo);

private:
	CCommandLibraryPtr	m_pCmdLibrary;
};

// CCommandBase smart pointers
using CDecoderPtr = std::shared_ptr<CDecoder>;
using CDecoderWPtr = std::weak_ptr<CDecoder>;
using CDecoderUPtr = std::unique_ptr<CDecoder>;
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
} // namespace core
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
} // namespace vasm
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif // VASM_CORE_DECODER_H
